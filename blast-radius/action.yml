name: 'Parse Changed Java Methods'
description: 'A custom action to detect changed Java files and parse methods using Go, and to report affected system flows.'

inputs:
  base_ref:
    description: 'The base branch in the pull request'
    required: true
  head_ref:
    description: 'The head branch in the pull request'
    required: true
  environment:
    description: 'Specify the environment (e.g., production, staging)'
    required: true
    default: 'production'
  username:
    description: 'API Username'
    required: true
  password:
    description: 'API Password'
    required: true
  api_token:
    description: 'API Access Token'
    required: true
  digma_url:
    description: 'Digma API Base URL'
    required: true
  jaeger_url:
    description: 'Jaeger UI Base URL'
    required: true
  staged:
    description: 'Check staged (uncommitted) changes instead of committed changes'
    required: false
    default: 'false'
  verbose:
    description: 'Enable verbose logging'
    required: false
    default: 'false'
  github_token:
    description: 'GitHub Token for interacting with the GitHub API'
    required: true
  repository:
    description: 'The repository in the pull request'
    required: true
  pull_request_number:
    description: 'The pull request number'
    required: true


runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Fetch full history to enable proper diff

    - name: Fetch PR branches
      run: |
        git fetch origin "${{ inputs.base_ref }}"  # Fetch the base (destination) branch
        git fetch origin "${{ inputs.head_ref }}"  # Fetch the head (source) branch
      shell: bash

    - name: Download or Use the Executable
      run: |
        mkdir -p /tmp/digma
        curl -L https://github.com/digma-ai/digma/raw/refs/heads/main/dev/tools/java-diff-linux-x64 -o /tmp/digma/java-diff
        chmod +x /tmp/digma/java-diff
      shell: bash

    - name: Detect changed Java files and parse methods
      run: |
        if [ "${{ inputs.staged }}" = "true" ]; then
          changed_files=$(git diff --cached --name-only | grep '.java')
        else
          changed_files=$(git diff --name-only origin/${{ inputs.base_ref }}...origin/${{ inputs.head_ref }} | grep '.java')
        fi

        echo "Changed files: $changed_files"

        if [ -z "$changed_files" ]; then
          echo "No committed Java files changed."
          exit 0
        fi

        # Run the diff tool on the changed files
        echo "$changed_files" | xargs /tmp/digma/java-diff --base-ref=origin/${{ inputs.base_ref }} --head-ref=origin/${{ inputs.head_ref }} --verbose=${{ inputs.verbose }}
      shell: bash

    - name: Login to API and get access token (ignore SSL certs)
      run: |
        digma_url="${{ inputs.digma_url }}"
        user="${{ inputs.username }}"
        password="${{ inputs.password }}"
        api_token="${{ inputs.api_token }}"

        # Make the POST request and store the response (ignore SSL certs)
        response=$(curl -k -s -X POST "${digma_url}/authentication/login" \
          -H "Digma-Access-Token: Token $api_token" \
          -H "Content-Type: application/json" \
          -H "Accept: application/json" \
          -d '{"username":"'"$user"'","password":"'"$password"'"}')

        # Parse the access token from the response
        access_token=$(echo $response | jq -r '.accessToken')

        if [ -z "$access_token" ]; then
          echo "Login failed. No access token received."
          exit 1
        else
          echo "Login successful. Access token: $access_token"
        fi

        # Store access_token as an environment variable
        echo "ACCESS_TOKEN=$access_token" >> $GITHUB_ENV
      shell: bash

    - name: Parse impacted flows and create PR comment
      run: |
        if [ ! -f changed_codeobjects.csv ]; then
          echo "No changed methods detected."
          exit 0
        fi

        # Parse the CSV to construct the methodCodeObjectIds in the form of packageName.className$_$$methodName
        methodCodeObjectIds=()
        firstLine=true  # Flag to skip the first line (header)

        while IFS=',' read -r fileName packageName className methodName; do
          if [ "$firstLine" = true ]; then
            firstLine=false  # Skip the header line
            continue
          fi

          # Construct the methodCodeObjectId
          methodCodeObjectId="${packageName}.${className}\$_\$${methodName}"
          methodCodeObjectIds+=("$methodCodeObjectId")

        done < changed_codeobjects.csv

        # Construct the API payload
        environment="${{ inputs.environment }}"
        payload=$(jq -n \
          --arg env "$environment" \
          --argjson methods "$(printf '%s\n' "${methodCodeObjectIds[@]}" | jq -R . | jq -s .)" \
          '{environment: $env, methodCodeObjectIds: $methods}')

        echo "API payload: $payload"

        # Call the get_method_usage API (ignore SSL certs)
        response=$(curl -k -s -X POST "${{ inputs.digma_url }}/Insights/get_method_usage" \
          -H "Authorization: Bearer $ACCESS_TOKEN" \
          -H "Content-Type: application/json" \
          -d "$payload")

        echo "API response: $response"

        # Parse the response for impacted flows and include the Jaeger trace link
        impacted_flows=$(echo "$response" | jq -r --arg jaeger_url "${{ inputs.jaeger_url }}" '.methodsFlows[] | .flows[] | "\(.percentage)% *\(.firstService.service)*:\(.firstService.span) -> *\(.lastService.service)*:\(.lastService.span) [Link](\($jaeger_url)/trace/\(.sampleTraceIds[0]))"')
        # Prepare the PR comment with a numbered list
        pr_comment="### Impacted Flows:\n"
        flow_number=1

        # Break impacted_flows into individual flows and construct a numbered list
        while IFS= read -r flow; do
          pr_comment+="$flow_number. $flow\n"
          ((flow_number++))
        done <<< "$impacted_flows"

        # New code
        # Prepare the grouped flows
        jaeger_url="${{ inputs.jaeger_url }}"

        # Prepare the grouped flows
        grouped_flows=$(echo "$response" | jq -r --arg jaeger_url "$jaeger_url" '
          .methodsFlows[]
          | .flows[] as $flow
          | ($flow.firstService.service // "(unknown)") as $firstService
          | ($flow.firstService.span // "(unknown)") as $firstSpan
          | ($flow.lastService.service // "(unknown)") as $lastService
          | ($flow.lastService.span // "(unknown)") as $lastSpan
          | ($flow.sampleTraceIds[0] // "(none)") as $sampleTraceId
          | (.methodCodeObjectId // "(unknown)") as $methodCodeObjectId
          | [$firstService, $firstSpan, $lastService, $lastSpan, $methodCodeObjectId, $sampleTraceId] | @tsv') || { echo "Error processing JSON with jq"; exit 1; }

        # Process the grouped flows with awk
        grouped_flows=$(echo "$grouped_flows" | awk -F'\t' -v jaeger_url="$jaeger_url" '
          {
            firstService = $1;
            firstSpan = $2;
            lastService = $3;
            lastSpan = $4;
            methodCodeObjectId = $5;
            sampleTraceId = $6;

            # Split methodCodeObjectId into class and method
            split(methodCodeObjectId, method_parts, "\\$_\\$");
            class_name = method_parts[1];
            method_name = method_parts[2];
            trace_link = jaeger_url "/trace/" sampleTraceId;

            # Construct the flow key with <i> tags
            flow_key = "<i>" firstService "</i>:" firstSpan " -> <i>" lastService "</i>:" lastSpan;

            # Initialize the counter for this flow key if not already done
            if (!(flow_key in method_counter)) {
              method_counter[flow_key] = 1;
            } else {
              method_counter[flow_key]++;
            }

            method_num = method_counter[flow_key];

            # Append the method to the methods list for this flow key
            methods[flow_key] = methods[flow_key] method_num ". " class_name "." method_name " <a href=\"" trace_link "\">link</a>\n";
          }
          END {
            for (key in methods) {
              print "<details>\n<summary>" key "</summary>\n" methods[key] "</details>\n";
            }
          }')

        # Escape the PR comment for JSON
        escaped_pr_comment=$(echo "$grouped_flows" | sed 's/\\/\\\\/g; s/"/\\"/g; s/\n/\\n/g')

        # Prepare the JSON payload
        payload=$(jq -n --arg body "$escaped_pr_comment" '{body: $body}')

        # Output the payload for debugging
        echo "Payload: $payload"

        # Post the PR comment (ensure you have the necessary variables defined)
        curl -X POST \
          -H "Authorization: Bearer ${{ inputs.github_token }}" \
          -H "Content-Type: application/json" \
          -d "$payload" \
          "https://api.github.com/repos/${{ inputs.repository }}/issues/${{ inputs.pull_request_number }}/comments"

        # Add annotations
        if [ ! -f changed_codeobjects.csv ]; then
          echo "No changed methods detected."
          exit 0
        fi

        # Parse the API response and store impacted flows
        response_flows=$(echo "$response" | jq -r '.methodsFlows[] | {methodCodeObjectId, flows}')

        echo "Response flows: $response_flows"

        # Iterate over each row in the CSV
        while IFS=',' read -r fileName packageName className methodName; do
          if [ "$className" != "Class Name" ]; then
            # Create methodCodeObjectId based on the CSV row
            methodCodeObjectId="${packageName}.${className}\$_\$${methodName}"

            echo "looking for matching flows: $methodCodeObjectId"

            # Find matching flows for the methodCodeObjectId in the API response
            matching_flows=$(echo "$response_flows" | jq -r --arg methodCodeObjectId "$methodCodeObjectId" '
              select(.methodCodeObjectId == $methodCodeObjectId) | .flows[]')

            echo "matching flows: $matching_flows"

            if [ -n "$matching_flows" ]; then
              flow_number=1
              annotation=""
              title="Impacted flow"

              # Use process substitution or here-string to avoid subshells
              while IFS= read -r flow; do
                echo "posting annotation:  $flow"
                echo "::notice file=$fileName,title=$title::wiki https://github.com/your/repo/wiki/GHA-0001::$flow"
                echo "::notice file=$fileName,title=$title::$flow https://digma.com/1"

                ((flow_number++))
              done <<< "$(echo "$matching_flows" | jq -r --arg jaeger_url "${{ inputs.jaeger_url }}" '
                "\(.firstService.service):\(.firstService.span) -> \(.lastService.service):\(.lastService.span) \($jaeger_url)/trace/\(.sampleTraceIds[0])"')"
              
            fi
          fi
        done < changed_codeobjects.csv

      shell: bash

    - name: Upload the CSV with methods
      uses: actions/upload-artifact@v3
      with:
        name: changed_codeobjects
        path: changed_codeobjects.csv