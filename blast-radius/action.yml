name: Java Parser with Method Usage Insights

on:
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Specify the environment (e.g., production, staging)'
        required: true
      username:
        description: 'API Username'
        required: true
      password:
        description: 'API Password'
        required: true
      api_token:
        description: 'API Access Token'
        required: true

jobs:
  parse-java-and-add-comment:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Java diff tool
        run: |
          mkdir -p /tmp/digma
          curl -L https://github.com/digma-ai/digma/raw/refs/heads/main/dev/tools/java-diff-linux-x64 -o /tmp/digma/java-diff
          chmod +x /tmp/digma/java-diff
          changed_files=$(git diff --name-only HEAD~1 HEAD | grep '.java')
          if [ -z "$changed_files" ]; then
            echo "No committed Java files changed."
            exit 0
          fi
          echo "$changed_files" | xargs /tmp/digma/java-diff --verbose

      - name: Login to API and get access token
        run: |
          domain="https://api.example.com"
          user="${{ inputs.username }}"
          password="${{ inputs.password }}"

          # Make the POST request and store the response
          response=$(curl -s -k -X POST "${domain}/authentication/login" \
            -H "Digma-Access-Token: Token $api_token" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -d '{"username":"'"$user"'","password":"'"$password"'"}')

          # Parse the access token from the response
          access_token=$(echo $response | jq -r '.accessToken')

          if [ -z "$access_token" ]; then
            echo "Login failed. No access token received."
            exit 1
          else
            echo "Login successful. Access token: $access_token"
          fi

          # Store access_token as an environment variable
          echo "ACCESS_TOKEN=$access_token" >> $GITHUB_ENV

      - name: Read CSV and call get_method_usage API (ignore SSL certs)
        run: |
          if [ ! -f changed_codeobjects.csv ]; then
            echo "No changed methods detected."
            exit 0
          fi

          # Parse the CSV to construct the methodCodeObjectIds in the form of packageName.className$_$$methodName
          methodCodeObjectIds=()
          while IFS=',' read -r packageName className methodName; do
            if [ "$className" != "Class Name" ]; then
              methodCodeObjectId="${packageName}.${className}\$_\$${methodName}"
              methodCodeObjectIds+=("$methodCodeObjectId")
            fi
          done < changed_codeobjects.csv

          # Construct the API payload
          environment="${{ inputs.environment }}"
          payload=$(jq -n \
            --arg env "$environment" \
            --argjson methods "$(echo ${methodCodeObjectIds[@]} | jq -R . | jq -s .)" \
            '{environment: $env, methodCodeObjectIds: $methods}')

          # Call the get_method_usage API (ignore SSL certs)
          response=$(curl -k -s -X POST "${{ inputs.digma_url }}/Insights/get_method_usage" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$payload")

          echo "API response: $response"

          # Parse the response
          impacted_flows=$(echo "$response" | jq -r '.methodsFlows[] | .flows[] | "\(.percentage)% [\(.firstService.service)][\(.firstService.span)] -> [\(.lastService.service)][\(.lastService.span)]"')

          # Prepare the PR comment
          pr_comment="### Impacted Flows:\n"
          while IFS=',' read -r packageName className methodName; do
            if [ "$className" != "Class Name" ]; then
              methodCodeObjectId="${packageName}.${className}\$_\$${methodName}"
              pr_comment+="- **${methodCodeObjectId}**: \n"
              pr_comment+="${impacted_flows}\n"
            fi
          done < changed_codeobjects.csv

          echo "PR Comment: $pr_comment"

          # Post a comment to the PR
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"body\": \"$pr_comment\"}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"        run: |
          if [ ! -f changed_codeobjects.csv ]; then
            echo "No changed methods detected."
            exit 0
          fi

          # Parse the CSV to construct the methodCodeObjectIds in the form of packageName.className$_$$methodName
          methodCodeObjectIds=()
          while IFS=',' read -r packageName className methodName; do
            if [ "$className" != "Class Name" ]; then
              methodCodeObjectId="${packageName}.${className}\$_\$${methodName}"
              methodCodeObjectIds+=("$methodCodeObjectId")
            fi
          done < changed_codeobjects.csv

          # Construct the API payload
          environment="${{ inputs.environment }}"
          payload=$(jq -n \
            --arg env "$environment" \
            --argjson methods "$(echo ${methodCodeObjectIds[@]} | jq -R . | jq -s .)" \
            '{environment: $env, methodCodeObjectIds: $methods}')

          # Call the get_method_usage API (ignore SSL certs)
          response=$(curl -k -s -X POST "${{ inputs.digma_url }}/Insights/get_method_usage" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$payload")

          echo "API response: $response"

          # Parse the response
          impacted_flows=$(echo "$response" | jq -r '.methodsFlows[] | .flows[] | "\(.percentage)% [\(.firstService.service)][\(.firstService.span)] -> [\(.lastService.service)][\(.lastService.span)]"')

          # Prepare the PR comment
          pr_comment="### Impacted Flows:\n"
          while IFS=',' read -r packageName className methodName; do
            if [ "$className" != "Class Name" ]; then
              methodCodeObjectId="${packageName}.${className}\$_\$${methodName}"
              pr_comment+="- **${methodCodeObjectId}**: \n"
              pr_comment+="${impacted_flows}\n"
            fi
          done < changed_codeobjects.csv

          echo "PR Comment: $pr_comment"

          # Post a comment to the PR
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"body\": \"$pr_comment\"}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"        run: |
          if [ ! -f changed_codeobjects.csv ]; then
            echo "No changed methods detected."
            exit 0
          fi

          # Parse the CSV to construct the payload
          methodCodeObjectIds=()
          while IFS=',' read -r packageName className methodName; do
            if [ "$className" != "Class Name" ]; then
              methodCodeObjectId="${packageName}.${className}\$_\$${methodName}"
              methodCodeObjectIds+=("$methodCodeObjectId")
            fi
          done < changed_codeobjects.csv

          # Construct the API payload
          environment="${{ inputs.environment }}"
          payload=$(jq -n \
            --arg env "$environment" \
            --argjson methods "$(echo ${methodCodeObjectIds[@]} | jq -R . | jq -s .)" \
            '{environment: $env, methodCodeObjectIds: $methods}')

          # Call the get_method_usage API
          response=$(curl -k -s -X POST "https://api.example.com/Insights/get_method_usage" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$payload")

          echo "API response: $response"

          # Extract the flows from the response
          affectedFlows=$(echo $response | jq '.flows[]')

          # Prepare the PR comment
          pr_comment="### Affected Methods and System Flows\n"
          while IFS=',' read -r className methodName; do
            if [ "$className" != "Class Name" ]; then
              pr_comment+="- **${className}.${methodName}**: \n"
              pr_comment+="$affectedFlows\n"
            fi
          done < changed_codeobjects.csv

          # Post a comment to the PR
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"body\": \"$pr_comment\"}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"

      - name: Upload the CSV with methods
        uses: actions/upload-artifact@v3
        with:
          name: changed_codeobjects
          path: changed_codeobjects.csv